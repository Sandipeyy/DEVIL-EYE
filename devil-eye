#!/bin/bash

rd="\e[1;31m"
gr="\e[1;32m"
cy="\e[1;36m"
yl="\e[1;33m"

name=$( basename $0 )

banner(){

    cowsay -f eyes "Devil - Eye"
    echo -e "\n             ${rd}YOUTUBE ${cy}|${rd} SANDIP ORIG"
    echo -e "          ${cy} DEVIL EYE BY ${rd}SANDIP GURUNG\n"

}

folder(){

    if [ ! -d "/data/data/com.termux/files/usr/etc/${name}" ]; then
	mkdir "/data/data/com.termux/files/usr/etc/${name}"

    fi
    file

}

file(){

    if [[ ! -f "/data/data/com.termux/files/usr/bin/${name}" ]]; then
	cp -f "${name}" "/data/data/com.termux/files/usr/bin"
    fi

    if [[ -f "${PREFIX}/etc/motd" ]]; then
	mv "${PREFIX}/etc/motd" "${PREFIX}/etc/motd.old"
    fi

}

require(){
    clear
    echo -e "\033[1;33m[*] Installing dependencies!"
    apt update && apt upgrade -y && apt install toilet figlet cowsay ruby -y && gem install lolcat
    clear
    echo -e "\e[1;33m[*] Setup completed successfully!"
    echo "[#] Now, you can execute devil-eye file to start Devil-Eye!"

    echo

}

textcli(){
    folder

    echo "${1}" > "/data/data/com.termux/files/usr/etc/${name}/name.txt"
    echo "${2}" > "/data/data/com.termux/files/usr/etc/${name}/banner.txt"
}

text(){
    clear; banner;
    echo -e "\n${gr}Enter Your Name: ${cy}"
    read user

    echo -e "\n${gr}Enter Banner Name: ${cy}"
    read banner

    textcli "${user}" "${banner}"
}

filemanage(){

    if [[ ! -f "/data/data/com.termux/files/usr/etc/${name}/bash.bashrc_old" ]]; then
	cp -f "/data/data/com.termux/files/usr/etc/bash.bashrc" "/data/data/com.termux/files/usr/etc/${name}/bash.bashrc_old";
    fi

    rm /data/data/com.termux/files/usr/etc/bash.bashrc
    cp -f "/data/data/com.termux/files/usr/etc/${name}/bash.bashrc_old" /data/data/com.termux/files/usr/etc/bash.bashrc

}

help(){
    clear;
    banner;
    echo -e "\n\n              ${rd}[ ${cy}H O W  T O  U S E ${rd}]\n"
    echo -e "${gr}devil-eye ${rd}[${yl}-${cy}o${rd}] ${gr}(${cy}value${gr})"
    echo -e "${gr}devil-eye ${rd}[${yl}--${cy}option${rd}] ${gr}(${cy}value${gr})\n"
    echo -e "\n\n              ${rd}[ ${cy}N E E D  H E L P ${rd}]\n"
    echo -e "${gr}[-r] [--require] ${rd}=>  ${yl}To install requirements"
    echo -e "${gr}[-t] [--text]    ${rd}=>  ${yl}To input banner and name"
    echo -e "${gr}[-h] [--help]    ${rd}=>  ${yl}Need help\n\n"
    echo -e "${rd}Note: ${gr}Don't pass any argument for ${cy}Graphical Mode\n"

}

setting(){
    filemanage;
    echo "( cowsay -f eyes < /data/data/com.termux/files/usr/etc/${name}/banner.txt && toilet -f smblock --filter border:metal < /data/data/com.termux/files/usr/etc/${name}/name.txt ) | lolcat" >> /data/data/com.termux/files/usr/etc/bash.bashrc
    clear;
    ( cowsay -f eyes "Success Done..!" && toilet -f smblock --filter border:metal "                  Done                  " ) | lolcat
}


main() {

case $1 in
    "-r" | "--require")
	require;;

    "-t" | "--text")
	textcli "${2}" "${3}"; setting;;

    "")
	text; setting;;

    "-h" | "--help" | *)
	help;;

esac

}

main "${@}"
